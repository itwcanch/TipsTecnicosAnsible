IMPORTANT
Only the space character can be used for indentation; tab characters are not allowed.

If you use the vi text editor, you can apply some settings which might make it easier to edit your playbooks. 
For example, you can add the following line to your $HOME/.vimrc file, and when vi detects that you are editing a YAML file, 
it performs a 2-space indentation when you press the Tab key and autoindents subsequent lines.

    autocmd FileType yaml setlocal ai ts=2 sw=2 et

************************************************************************************************************************************************************************
Table 2.5. Configuring the Output Verbosity of Playbook Execution

Option	Description
-v	The task results are displayed.
-vv	Both task results and task configuration are displayed
-vvv	Includes information about connections to managed hosts
-vvvv	Adds extra verbosity options to the connection plug-ins, including users being used in the managed hosts to execute scripts, and what scripts have been executed


************************************************************************************************************************************************************************

Syntax Verification
    ansible-playbook --syntax-check ARCHIVO.yml
    

************************************************************************************************************************************************************************
Executing a Dry Run -- Simulacro de ejecuciÃ³n, pero no realiza ningun cambio.
    ansible-playbook -C ARCHIVO.yml

************************************************************************************************************************************************************************

Running PlayBooks
  ansible-playbook ARCHIVO.yml
  
************************************************************************************************************************************************************************
Module Documentation

  ansible-doc -l  --> Muestra los diferentes packages disponibles
  
  ansible-doc yum --> Muestra los detalles de las opciones del modulo yum

  
************************************************************************************************************************************************************************
Naming Variables
 Valid Variables names: web_server, remote_file, file_1 or file1, remote_server_1, remote_server1
 
    Host Variable and group Variables
            Defining the ansible_user host variable for demo.example.com:
            [servers]
            demo.example.com  ansible_user=joe
    Defining the user group variable for the servers host group.

            [servers]
            demo1.example.com
            demo2.example.com

            [servers:vars]
            user=joe
            
    Defining the user group variable for the servers group, which consists of two host groups each with two servers.

            [servers1]
            demo1.example.com
            demo2.example.com

            [servers2]
            demo3.example.com
            demo4.example.com

            [servers:children]
            servers1
            servers2

            [servers:vars]
            user=joe
            
************************************************************************************************************************************************************************

Table 3.3. Examples of Ansible Facts

Fact	Variable
Short host name	--> ansible_facts['hostname']
Fully qualified domain name	--> ansible_facts['fqdn']
Main IPv4 address (based on routing)	--> ansible_facts['default_ipv4']['address']
List of the names of all network interfaces --> ansible_facts['interfaces']
Size of the /dev/vda1 disk partition	--> ansible_facts['devices']['vda']['partitions']['vda1']['size']
List of DNS servers	--> ansible_facts['dns']['nameservers']
Version of the currently running kernel	--> ansible_facts['kernel']

Table 3.4. Comparison of Selected Ansible Fact Names

ansible_facts form	Old fact variable form
ansible_facts['hostname']	--> ansible_hostname
ansible_facts['fqdn']	--> ansible_fqdn
ansible_facts['default_ipv4']['address']	--> ansible_default_ipv4['address']
ansible_facts['interfaces']	ansible_interfaces
ansible_facts['devices']['vda']['partitions']['vda1']['size']	--> ansible_devices['vda']['partitions']['vda1']['size']
ansible_facts['dns']['nameservers']	--> ansible_dns['nameservers']
ansible_facts['kernel']	--> ansible_kernel

************************************************************************************************************************************************************************

The Ansible setup module retrieves facts from systems. Run an ad hoc command to retrieve the facts for all servers in the webserver group. 
The output displays all the facts gathered for servera.lab.example.com in JSON format. Review some of the variables displayed.

[student@workstation data-facts]$ ansible webserver -m setup

************************************************************************************************************************************************************************
